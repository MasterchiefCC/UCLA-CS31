1
-------------------------------------------------------------
a

 int main()
    {
        int arr[3] = { 5, 10, 15 };
        int* ptr = arr;

        *ptr = 30;          // set arr[0] to 30
        *ptr + 1 = 20;      // set arr[1] to 20//bug cant compile
        ptr += 2;
        ptr[0] = 10;        // set arr[2] to 10

        while (ptr >= arr)
        {
            ptr--;//subtract the address first then print so error
            cout << *ptr << endl;    // print values
        }
    }

-------------------------------------------------------------


 int main()
{
	int arr[3] = { 5, 10, 15 };
	int* ptr = arr;

	*ptr = 30;            // set arr[0] to 30
	*(ptr + 1) = 20;      // set arr[1] to 20

	ptr[2] = 10;          // set arr[2] to 10

	while (ptr <= &arr[2])
	{
		cout << *ptr << endl;    // print values
		ptr++;
	}
}

///////////////////////////////////////////////////////////////

b
void findMax(int arr[], int n, int* pToMax)
    {
        if (n <= 0) 
            return;      // no items, no maximum!
    
        pToMax = arr;

        for (int i = 1; i < n; i++)
        {
            if (arr[i] > *pToMax)
                 pToMax = arr + i;
        }
    }       

    int main()
    {
        int nums[4] = { 5, 3, 15, 6 };
        int* ptr;//the pointer here doesnt point to any address

        findMax(nums, 4, ptr);//pass the pointer above that doesnt point to any address after the function that value in some address will be delete
        cout << "The maximum is at address " << ptr << endl;
        cout << "It's at position " << ptr - nums << endl;
        cout << "Its value is " << *ptr << endl;
    }

-------------------------------------------------------------

 void findMax(int arr[], int n, int* &pToMax)
    {
        if (n <= 0) 
            return;      // no items, no maximum!
    
        pToMax = arr;

        for (int i = 1; i < n; i++)
        {
            if (arr[i] > *pToMax)
                 pToMax = arr + i;
        }
    }       

    int main()
    {
        int nums[4] = { 5, 3, 15, 6 };
        int* ptr;

        findMax(nums, 4, ptr);
        cout << "The maximum is at address " << ptr << endl;
        cout << "It's at position " << ptr - nums << endl;
        cout << "Its value is " << *ptr << endl;
    }
///////////////////////////////////////////////////////////////

c

void computeCube(int n, int* ncubed)
    {
        *ncubed = n * n * n;
    }

    int main()
    {
        int* ptr;//the point havent point to any address
        computeCube(5, ptr);
        cout << "Five cubed is " << *ptr << endl;
    }
-------------------------------------------------------------
  void computeCube(int n, int* ncubed)
    {
        *ncubed = n * n * n;
    }

    int main()
    {
        int a;
        int* ptr=&a;
        computeCube(5, ptr);
        cout << "Five cubed is " << *ptr << endl;
    }
///////////////////////////////////////////////////////////////

d
  bool strequal(const char str1[], const char str2[])
    {
        while (str1 != 0  &&  str2 != 0)//compare the address not the value in those address
        {
            if (str1 != str2)  // compare corresponding characters//compare two address not the value in those address
                return false;
            str1++;            // advance to the next character
            str2++;
        }
        return str1 == str2;   // both ended at same time?//compare two address not the value in those address
    }

    int main()
    {
        char a[15] = "Zhao";
        char b[15] = "Zhou";

        if (strequal(a,b))
            cout << "They're the same person!\n";
    }
-------------------------------------------------------------

bool strequal(const char str1[], const char str2[])
    {
        while (*str1 != 0  ||  *str2 != 0)
        {
            if (*str1 != *str2)  // compare corresponding characters
                return false;
            str1++;            // advance to the next character
            str2++;
        }
        return *str1 == *str2;   // both ended at same time?
    }

    int main()
    {
        char a[15] = "Zhao";
        char b[15] = "Zhou";

        if (strequal(a,b))
            cout << "They're the same person!\n";
    }
///////////////////////////////////////////////////////////////

e

#include <iostream>
    using namespace std;

    int* getPtrToArray(int& m)
    {
        int anArray[100];
        for (int j = 0; j < 100; j++)
            anArray[j] = 100-j;
        m = 100;
        return anArray;
    }

    void f()
    {
        int junk[100];
        for (int k = 0; k < 100; k++)
            junk[k] = 123400000 + k;
    }

    int main()
    {
        int n;
        int* ptr = getPtrToArray(n);
        f();
        for (int i = 0; i < 3; i++)
            cout << ptr[i] << ' ';
        for (int i = n-3; i < n; i++)
            cout << ptr[i] << ' ';
        cout << endl;
    }
//the array anArray is a local value, so the scope of that array is in the function.
// After that function all the value in those address will be released, however, that pointer will point to the address of the first value of anArray.
//when in the main routine access to the value in those address, the expected value have been released. It wont print those value in anArray.


**************************************************************

2
a
double*cat;
b
double mouse[5];
c
cat=&mouse[4];
d
*cat=25;
e
mouse[3]=42;
f
cat-=3;
g
cat[1]=54;
h
cat[0]=17;
i
bool b=(*cat==*(cat+1));
j
bool d=(cat==&arr[0]);


**************************************************************

3
a
double mean(const double*scores, int numScores) {
double tot = 0;
int n = numScores-1;
for (; n>=0; n--)
tot += *(scores +n);

return tot / numScores;
}

b

const char* findTheChar(const char *str, char chr)
    {
        for (int k = 0; str+k != 0; k++)
            if (*(str+k) == chr)
                return str+k;

        return nullptr;
    }

c
 const char* findTheChar(const char str[], char chr)
    {
        for(; *str!=0; str++)
if(*str==chr)return str;

        return nullptr;
    }

4

  #include <iostream>
    using namespace std;

    int* maxwell(int* a, int* b)
    {
        if (*a > *b)
            return a;
        else
            return b;
    }

    void swap1(int* a, int* b)//address of array[0] and array[1] have been pass to point a and point b
    {
        int* temp = a;// pointer temp point to the address of array[0]
        a = b;//pointer a point to the address of array[1]
        b = temp;// pointer b point to the address of array[0]
    }

    void swap2(int* a, int* b)//address of array[0] and array[2] have been pass to point a and point b
    {
        int temp = *a;//the value in array[0] copy by variables temp
        *a = *b;// the value in array[0] rewrite by the value in array[2]
        *b = temp;// the value in array[2] rewrite by the previous value in array[0] which have been stored int temp
    }

    int main()
    {
        int array[6] = { 5, 3, 4, 17, 22, 19 };
        
        int* ptr = maxwell(array, &array[2]);//ptr point to the address of array[0]
        *ptr = -1;//the value of array[0]change to -1
        ptr += 2;//pointer ptr points to the address of array[2];
        ptr[1] = 9;//the value of array[3] change to 9
        *(array+1) = 79;//the value of array[1] change to 79

        cout << &array[5] - ptr << endl;//print 3 because now pointer ptr points to address of address of array[2]. 5-2=3 

        swap1(&array[0], &array[1]);//nothing happen here
        swap2(array, &array[2]);//swap the value in array[0] and the value in array[2]

        for (int i = 0; i < 6; i++)//traversal all value in array
            cout << array[i] << endl;
    } 
//{ 5, 3, 4, 17, 22, 19 }->{ -1, 3, 4, 17, 22, 19 }->{ -1, 3, 4, 9, 22, 19 }->{ -1, 79, 4, 9, 22, 19 }->{4, 79,-1, 9, 22, 19 }
//1st: print 3;
//2nd: print 4;
//3rd: print 79;
//4th: print -1;
//5th: print 9;
//6th: print 22;
//7th: print 19


5

void removeS(char*str){
for(; *str!=0; str++)
if(*str=='s'||*str=='S')
for(char *a=str; *a!=0; a++){
*a=*(a+1);
str--;
}
}
