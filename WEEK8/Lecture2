struct target{
pubic:
void init();
bool move(char dir);
void replayhistory();

private:
int pos;
string history;
//invariant;
//history consists only of Rs and Ls
//pos == # of Rs in history minus
//       # of Ls in history
};

void target::init(){
pos=0;
history="";
}
bool target::move(char dir){
switch(dir){
case 'R':
case'r':
pos++;
break;
case 'L':
case'l':
pos--;
break;
default:
return 0;
}
this->history+=toupper(dis);
return 1;
}

void target::replayhistory(){
for(int k=0; k<history.size(); k++){
cout<<history[k]<<endl;
}

void(target&x, int nTimes, cahr d){
for(int a=0; a<nTimes; a++)x.move(d);
}

void report(target&x){
cout<<"There' s a target at position<<x.position()<< endl;
}
